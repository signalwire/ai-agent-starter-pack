<html>

<head>
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">

    <style type="text/css">
        .row {
            margin-top: 5px;
        }

        #logs span {
            display: block;
        }

        .agent-buttons {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }
    </style>
</head>

<body>
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <div class="container">
            <a class="navbar-brand" href="/">SignalWire AI Agents Starter Pack</a>
        </div>
    </nav>
    <div class="container">
        <div class="row">
            <div class="col-md-6 media">
                <video id="remoteVideo" style="display: none;"></video>
            </div>
            <div class="col-md-6 media">
                <video id="localVideo" muted="muted" style="display: none;"></video>
            </div>
        </div>
        <div class="row">
            <div class="col-md-3">
                <div name="connectForm">
                    <form>
                        <h2>Connecting to the SIP Endpoint...</h2>
                    </form>
                </div>

                <div name="callForm" style="display: none;">
                    <form>
                        <div class="form-group agent-buttons">
                            <% agents.forEach( function(agent) { %>
                                <button type="button" name="callbtn" class="btn btn-primary"
                                    onclick="doCall('<%= agent %>')">Call
                                    <%= agent %>
                                </button>
                                <% }); %>
                                    <button type="button" name="hangupbtn" class="btn btn-danger" onclick="hangUp()"
                                        style="display: none;">Hang up</button>
                        </div>
                    </form>
                </div>
            </div>

            <div class="col-md-9">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Status</h5>
                        <span id="status">Ready to connect.</span>
                    </div>
                </div>
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Logs</h5>
                        <div id="logs">
                            
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                <div name="incomingForm" style="display: none;">
                    <form>
                        <button type="button" name="answerbtn" class="btn btn-success"
                            onclick="answerIncoming()">Answer</button>
                        <button type="button" name="incomingbtn" class="btn btn-danger" onclick="hangUpIncoming()"
                            style="display: none;">Hang up</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <script>
        var socket = new WebSocket('wss://<%= publicUrl %>');

        // Connection opened
        socket.addEventListener('open', function (event) {
            // socket.send('Hello Server!');
        });

        // Listen for messages
        socket.addEventListener('message', async function (event) {

            console.log('Message from server: ', await event.data.text());
            let log = JSON.parse(await event.data.text());

            var logs = document.getElementById('logs');

            // TODO: This seriously needs to be improved. This is just a quick and dirty way to display logs.
            switch(log.type) {
                case 'function_declaration_request':
                    logs.innerHTML = '<span style="color: white; background-color: red;">' + JSON.stringify(log) + '</span>' + logs.innerHTML;
                    break;
                case 'function_declaration_added':
                    logs.innerHTML = '<span style="color: white; background-color: green;">' + JSON.stringify(log) + '</span>' + logs.innerHTML;
                    break;
                default:
                    logs.innerHTML = '<span>' + JSON.stringify(log.message) + '</span>' + logs.innerHTML;
            }
        });

        // Connection closed
        socket.addEventListener('close', function (event) {
            console.log('Server connection closed');
        });

        // Connection error
        socket.addEventListener('error', function (event) {
            console.log('Error: ', event);
        });
    </script>

    <script src="https://cdn.jsdelivr.net/npm/sip.js@0.15.10/dist/sip-0.15.10.min.js"></script>
</body>

<script>

    var simple = null;
    var options = null;
    var ringtone = null;

    function connect() {
        var domain = '<%= sipEndpointDomain %>';
        var user = '<%= sipEndpointUser %>';
        var pass = '<%= sipEndpointPass %>';

        var sip_url = user + '@' + domain;
        console.log(sip_url);
        console.log(pass);

        options = {
            media: {
                remote: {
                    audio: document.getElementById('remoteVideo')
                }
            },
            wsServers: domain,
            ua: {
                wsServers: "wss://" + domain,
                uri: sip_url,
                password: pass,
                traceSip: true
            }
        };

        // this sets up the main object
        simple = new SIP.Web.Simple(options);

        // set up event handlers 
        simple.on('registered', function () {
            setStatus('Registered to SignalWire');
            hide('connectForm');
            show('callForm');
        });

        simple.on('connecting', function () {
            setStatus('Call ringing');
            hide('callbtn');
            show('hangupbtn');
        });

        simple.on('connected', function () {
            setStatus('Call connected!');
        });

        simple.on('ringing', function () {
            setStatus('Incoming call');
            show('incomingForm');
            ring();
        });
    }

    connect();

    // place a call to the destination
    function doCall(agentName) {
        // Update the Domain App to point to the correct Agent
        fetch('/updateDomainApp', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ agentName: agentName })
        })
            .then(response => response.json())
            .then(data => {
                console.log('Success:', data);
            })
            .catch((error) => {
                console.error('Error:', error);
            });

        console.log("Calling", '<%= domainAppUrl %>');
        // wait 1 second, then call
        setTimeout(() => {
            simple.call('<%= domainAppUrl %>');
        }, 1000);

    }

    // hang up any call
    function hangUp() {
        simple.hangup();
        setStatus('Ready');
        show('callbtn');
        hide('hangupbtn');
    }

    function hangUpIncoming() {
        simple.hangup();
        hide('incomingForm');
        show('answerbtn');
        hide('incomingbtn');
    }

    // pick up a ringing call
    function answerIncoming() {
        stopRing();
        simple.answer();
        show('incomingbtn');
        hide('answerbtn');
    }

    // these are support functions, not part of the main application

    function show(selector) {
        var matchedElements = document.getElementsByName(selector);
        matchedElements.forEach(element => {
            element.style.display = "block";
        });
    }

    function hide(selector) {
        var matchedElements = document.getElementsByName(selector);
        matchedElements.forEach(element => {
            element.style.display = "none";
        });
    }

    function setStatus(text) {
        document.getElementById("status").innerHTML = text;
    }

    function beep() {
        var snd = new Audio("data:audio/wav;base64,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qJrx4KOQjahZxWbcZgztj2c49nKmkId44S71j0c8eV9yDK6uPRzx5X18eDvjvQ6yKo9ZSS6l//8elePK/Lf//IInrOF/FvDoADYAGBMGb7FtErm5MXMlmPAJQVgWta7Zx2go+8xJ0UiCb8LHHdftWyLJE0QIAIsI+UbXu67dZMjmgDGCGl1H+vpF4NSDckSIkk7Vd+sxEhBQMRU8j/12UIRhzSaUdQ+rQU5kGeFxm+hb1oh6pWWmv3uvmReDl0UnvtapVaIzo1jZbf/pD6ElLqSX+rUmOQNpJFa/r+sa4e/pBlAABoAAAAA3CUgShLdGIxsY7AUABPRrgCABdDuQ5GC7DqPQCgbbJUAoRSUj+NIEig0YfyWUho1VBBBA//uQZB4ABZx5zfMakeAAAAmwAAAAF5F3P0w9GtAAACfAAAAAwLhMDmAYWMgVEG1U0FIGCBgXBXAtfMH10000EEEEEECUBYln03TTTdNBDZopopYvrTTdNa325mImNg3TTPV9q3pmY0xoO6bv3r00y+IDGid/9aaaZTGMuj9mpu9Mpio1dXrr5HERTZSmqU36A3CumzN/9Robv/Xx4v9ijkSRSNLQhAWumap82WRSBUqXStV/YcS+XVLnSS+WLDroqArFkMEsAS+eWmrUzrO0oEmE40RlMZ5+ODIkAyKAGUwZ3mVKmcamcJnMW26MRPgUw6j+LkhyHGVGYjSUUKNpuJUQoOIAyDvEyG8S5yfK6dhZc0Tx1KI/gviKL6qvvFs1+bWtaz58uUNnryq6kt5RzOCkPWlVqVX2a/EEBUdU1KrXLf40GoiiFXK///qpoiDXrOgqDR38JB0bw7SoL+ZB9o1RCkQjQ2CBYZKd/+VJxZRRZlqSkKiws0WFxUyCwsKiMy7hUVFhIaCrNQsKkTIsLivwKKigsj8XYlwt/WKi2N4d//uQRCSAAjURNIHpMZBGYiaQPSYyAAABLAAAAAAAACWAAAAApUF/Mg+0aohSIRobBAsMlO//Kk4soosy1JSFRYWaLC4qZBYWFRGZdwqKiwkNBVmoWFSJkWFxX4FFRQWR+LsS4W/rFRb/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////VEFHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAU291bmRib3kuZGUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMjAwNGh0dHA6Ly93d3cuc291bmRib3kuZGUAAAAAAAAAACU=");
        snd.play();
    }

    function ring() {
        ringtone = setInterval(() => {
            beep()
        }, 1000);
    }

    function stopRing() {
        clearInterval(ringtone);
    }

</script>

</html>